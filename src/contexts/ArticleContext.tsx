import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback, useMemo } from 'react';
import { getAllArticles, Article as ApiArticle } from '../services/articleService'; 

interface FilterParams {
  tag?: string;
  search?: string;
}

interface Article {
Â  id: string;
Â  title: string;
Â  content: string;
Â  excerpt: string;
Â  imageUrl: string;
Â  author: string;
Â  authorId: string;
Â  publishDate: string;
Â  readCount: number;
Â  isHeadline: boolean;
Â  tag: string;
Â  readTime?: string;
Â  createdAt?: number; // Add timestamp to prevent duplicates
}

interface ArticleContextType {
Â  publishedArticles: Article[];
Â  publishArticle: (article: Omit<Article, 'id' | 'author' | 'authorId' | 'publishDate' | 'readCount' | 'isHeadline' | 'createdAt'>, authorName?: string, authorId?: string) => Article;
Â  incrementReadCount: (articleId: string) => void;
  fetchArticles: (params?: FilterParams) => Promise<void>; 
}

const ArticleContext = createContext<ArticleContextType | undefined>(undefined);

const mapApiToLocalArticle = (apiArticle: ApiArticle): Article => {
    const publishDateString = apiArticle.publishedAt
        ? new Date(apiArticle.publishedAt).toLocaleDateString('id-ID', { day: 'numeric', month: 'short', year: 'numeric' })
        : 'N/A';
    
    return {
        id: apiArticle._id, 
        title: apiArticle.title,
        excerpt: apiArticle.excerpt,
        imageUrl: apiArticle.featuredImage || '',
        author: apiArticle.authorName,
        authorId: apiArticle.author?._id || '',
        publishDate: publishDateString,
        readCount: apiArticle.views, 
        isHeadline: apiArticle.isFeatured, 
        tag: apiArticle.category,
        readTime: `${apiArticle.readingTime} menit baca`,
        createdAt: new Date(apiArticle.createdAt).getTime(),
    } as Article;
};

export function ArticleProvider({ children }: { children: ReactNode }) {
Â  const [publishedArticles, setPublishedArticles] = useState<Article[]>([]);

  const fetchArticles = useCallback(async (params?: FilterParams) => {
    try {
        const response = await getAllArticles({
            status: 'published',
            tag: params?.tag,
            search: params?.search,
        });

        const mappedArticles = response.data.articles.map(mapApiToLocalArticle);

        setPublishedArticles(mappedArticles);
    } catch (error) {
        console.error("Gagal mengambil artikel:", error);
    }
  }, []);

  useEffect(() => {
      fetchArticles();
  }, [fetchArticles]); 

Â  useEffect(() => {
Â  Â  const interval = setInterval(() => {
Â  Â  Â  setPublishedArticles(prev => prev.map(article => {
Â  Â  Â  Â  const isRecent = article.createdAt && (Date.now() - article.createdAt) < 24 * 60 * 60 * 1000;
Â  Â  Â  Â  if (isRecent && Math.random() < 0.3) { // 30% chance to gain a reader
Â  Â  Â  Â  Â  const newReadCount = article.readCount + Math.floor(Math.random() * 3) + 1;
Â  Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  ...article,
Â  Â  Â  Â  Â  Â  readCount: newReadCount,
Â  Â  Â  Â  Â  Â  isHeadline: newReadCount >= 50 || article.isHeadline
Â  Â  Â  Â  Â  };
Â  Â  Â  Â  }
Â  Â  Â  Â  return article;
Â  Â  Â  }));
Â  Â  }, 10000); 

Â  Â  return () => clearInterval(interval);
Â  }, []);

Â  const publishArticle = useCallback((article: Omit<Article, 'id' | 'author' | 'authorId' | 'publishDate' | 'readCount' | 'isHeadline' | 'createdAt'>, authorName?: string, authorId?: string) => {
Â  Â  const wordCount = article.content.replace(/<[^>]*>/g, '').split(/\s+/).length;
Â  Â  const readingTime = Math.max(1, Math.ceil(wordCount / 200)); 
Â  Â  
Â  Â  const now = Date.now();
Â  Â  const uniqueId = `${now}-${Math.random().toString(36).substr(2, 9)}`; 
Â  Â  
Â  Â  const newArticle: Article = {
Â  Â  Â  ...article,
Â  Â  Â  id: uniqueId,
Â  Â  Â  author: authorName || 'Penulis Kamus Mahasiswa',
Â  Â  Â  authorId: authorId || 'writer-1',
Â  Â  Â  publishDate: new Date().toLocaleDateString('id-ID', {
Â  Â  Â  Â  day: 'numeric',
Â  Â  Â  Â  month: 'short',
Â  Â  Â  Â  year: 'numeric'
Â  Â  Â  }),
Â  Â  Â  readCount: 1, // Start with 1 read count (the author's read)
Â  Â  Â  isHeadline: false, 
Â  Â  Â  excerpt: article.excerpt || article.content.replace(/<[^>]*>/g, '').substring(0, 150) + '...',
Â  Â  Â  readTime: `${readingTime} menit baca`,
Â  Â  Â  createdAt: now
Â  Â  };
Â  Â  
Â  Â  let addedArticle: Article | null = null;
Â  Â  
Â  Â  setPublishedArticles(prev => {
Â  Â  Â  const existingArticle = prev.find(a => 
Â  Â  Â  Â  (a.title === newArticle.title && a.authorId === newArticle.authorId) ||
Â  Â  Â  Â  a.id === newArticle.id
Â  Â  Â  );
Â  Â  Â  
Â  Â  Â  if (existingArticle) {
Â  Â  Â  Â  console.warn('Article with same title or ID already exists');
Â  Â  Â  Â  addedArticle = existingArticle;
Â  Â  Â  Â  return prev; 
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  addedArticle = newArticle;
Â  Â  Â  return [newArticle, ...prev];
Â  Â  });
Â  Â  
Â  Â  return addedArticle || newArticle;
Â  }, []);

Â  const incrementReadCount = useCallback((articleId: string) => {
Â  Â  setPublishedArticles(prev => prev.map(article => {
Â  Â  Â  if (article.id === articleId) {
Â  Â  Â  Â  const newReadCount = article.readCount + 1;
Â  Â  Â  Â  const wasHeadline = article.isHeadline;
Â  Â  Â  Â  const becomeHeadline = newReadCount >= 50 && !wasHeadline;
Â  Â  Â  Â  
Â  Â  Â  Â  // Show notification when article becomes headline
Â  Â  Â  Â  if (becomeHeadline) {
Â  Â  Â  Â  Â  console.log(`ðŸŽ‰ Artikel "${article.title}" telah menjadi HEADLINE dengan ${newReadCount} pembaca!`);
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  ...article,
Â  Â  Â  Â  Â  readCount: newReadCount,
Â  Â  Â  Â  Â  // Auto-promote to headline if readCount reaches 50
Â  Â  Â  Â  Â  isHeadline: newReadCount >= 50 || article.isHeadline
Â  Â  Â  Â  };
Â  Â  Â  }
Â  Â  Â  return article;
Â  Â  }));
Â  }, []);

  const contextValue = useMemo(() => ({
    publishedArticles,
    publishArticle,
    incrementReadCount,
    fetchArticles, 
  }), [
    publishedArticles,
    publishArticle,
    incrementReadCount,
    fetchArticles,
  ]);


Â  return (
Â  Â  <ArticleContext.Provider value={contextValue}>
Â  Â  Â  {children}
Â  Â  </ArticleContext.Provider>
Â  );
}

export function useArticles() {
Â  const context = useContext(ArticleContext);
Â  if (context === undefined) {
Â  Â  throw new Error('useArticles must be used within an ArticleProvider');
Â  }
Â  return context;
}
